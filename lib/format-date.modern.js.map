{"version":3,"file":"format-date.modern.js","sources":["../src/presets.ts","../src/index.ts"],"sourcesContent":["export enum FormatDatePreset {\n    None,\n    DateTime,\n    DateTimeShort,\n    Date,\n    DateMedium,\n    DateShort,\n}\n\nexport const fetchPreset = (\n    preset: FormatDatePreset,\n    // locale: string,\n): Intl.DateTimeFormatOptions => {\n    switch (preset) {\n        case FormatDatePreset.None:\n            return {};\n        case FormatDatePreset.DateTime:\n            // \"November 25, 2024 at 15:00\"\n            // \"November 25, 2024 at 3:00 PM\"\n            return {\n                // weekday: \"short\",\n                year: \"numeric\",\n                month: \"long\",\n                day: \"numeric\",\n                hour: \"numeric\",\n                minute: \"numeric\",\n            };\n        case FormatDatePreset.DateTimeShort:\n            // \"11/25/24, 15:00\"\n            // \"11/25/24, 3:00 PM\"\n            return {\n                dateStyle: \"short\",\n                timeStyle: \"short\",\n            };\n\n        case FormatDatePreset.Date:\n            // \"November 25, 2024\"\n            return {\n                // dateStyle: \"long\",\n                year: \"numeric\",\n                month: \"long\",\n                day: \"2-digit\",\n            };\n        case FormatDatePreset.DateMedium:\n            // \"Nov 25, 2024\"\n            return {\n                // dateStyle: \"medium\",\n                year: \"numeric\",\n                month: \"short\",\n                day: \"2-digit\",\n            };\n        case FormatDatePreset.DateShort:\n            // \"11/25/24\"\n            return {\n                // dateStyle: \"short\",\n                year: \"numeric\",\n                month: \"2-digit\",\n                day: \"2-digit\",\n            };\n        default:\n            return {\n                dateStyle: \"full\",\n            };\n    }\n};\n","import { EpochUnit, isDate, toDate } from \"@chriscdn/to-date\";\nimport { Memoize } from \"@chriscdn/memoize\";\nimport { fetchPreset, FormatDatePreset } from \"./presets\";\nimport { getUserLocale } from \"get-user-locale\";\n\ntype DateRepresentation = Parameters<typeof toDate>[0];\ntype DateRepresentationNull = DateRepresentation | undefined | null;\nexport { FormatDatePreset } from \"./presets\";\n\nexport type FormatDateOptions = {\n  locale?: string;\n  preset?: FormatDatePreset;\n  formatOptions?: Intl.DateTimeFormatOptions;\n  epochUnit?: EpochUnit;\n};\n\nexport type FormatDateRelativeOptions = {\n  locale?: string;\n  formatOptions?: Intl.RelativeTimeFormatOptions;\n  unit?: Intl.RelativeTimeFormatUnit;\n  epochUnit?: EpochUnit;\n};\n\nconst _fetchFormatter = Memoize(\n  (locale: string, formatOptions: Intl.DateTimeFormatOptions) =>\n    new Intl.DateTimeFormat(locale, formatOptions),\n  { maxSize: 20 },\n);\n\nconst _fetchRelativeFormatter = Memoize(\n  (locale: string, formatOptions: Intl.RelativeTimeFormatOptions) =>\n    new Intl.RelativeTimeFormat(locale, formatOptions),\n  { maxSize: 20 },\n);\n\nconst _formatDate = Memoize(\n  (\n    value: DateRepresentation,\n    locale: string,\n    epochUnit: EpochUnit,\n    formatOptions: Intl.DateTimeFormatOptions,\n  ) => {\n    const date = toDate(value, epochUnit);\n    const dateFormatter = _fetchFormatter(locale, formatOptions);\n    return isDate(date) ? dateFormatter.format(date) : undefined;\n  },\n);\n\nconst _formatRelativeDate = Memoize(\n  (\n    value: number,\n    unit: Intl.RelativeTimeFormatUnit,\n    locale: string,\n    formatOptions: Intl.DateTimeFormatOptions,\n  ) => {\n    const dateRelativeFormatter = _fetchRelativeFormatter(\n      locale,\n      formatOptions,\n    );\n    return dateRelativeFormatter.format(value, unit);\n  },\n);\n\n/**\n * Get the browser locale, if possible. This will likely fail in SSR (i.e.,\n * Nuxt). Converts underscores to dashes.\n *\n * @param options {Options}\n * @returns\n */\nconst _browserLocale = Memoize(\n  (options: FormatDateOptions | FormatDateRelativeOptions) =>\n    (options.locale ?? getUserLocale({ fallbackLocale: \"en-GB\" })).replace(\n      \"_\",\n      \"-\",\n    ),\n);\n\nconst formatDate = Memoize(\n  (value: DateRepresentationNull, options: FormatDateOptions = {}) => {\n    if (value === undefined || value === null) {\n      return null;\n    } else {\n      const locale: Intl.LocalesArgument = _browserLocale(options);\n      const preset = options.preset ?? FormatDatePreset.DateTime;\n      const epochUnit = options.epochUnit ?? EpochUnit.BESTGUESS;\n      const formatOptions = options.formatOptions ?? {};\n\n      const intlFormatterOptions = fetchPreset(preset);\n\n      const dateTimeFormatOptions: Intl.DateTimeFormatOptions = {\n        ...intlFormatterOptions,\n        ...formatOptions,\n      };\n\n      return _formatDate(value, locale, epochUnit, dateTimeFormatOptions);\n    }\n  },\n);\n\nconst formatDateYYYYMMDD = Memoize((value: DateRepresentationNull) => {\n  const d = toDate(value);\n\n  if (d) {\n    const year = d.getFullYear();\n    const month = d.getMonth() + 1;\n    const day = d.getDate();\n\n    return [\n      year,\n      month.toString().padStart(2, \"0\"),\n      day.toString().padStart(2, \"0\"),\n    ].join(\"-\");\n  } else {\n    return null;\n  }\n});\n\nconst formatDateYYYYMMDDTHHMMSS = Memoize((value: DateRepresentationNull) => {\n  const d = toDate(value);\n\n  if (d) {\n    const year = d.getFullYear();\n    const month = d.getMonth() + 1;\n    const day = d.getDate();\n\n    const hours = d.getHours();\n    const minutes = d.getMinutes();\n    const seconds = d.getSeconds();\n\n    return [\n      [\n        year,\n        month.toString().padStart(2, \"0\"),\n        day.toString().padStart(2, \"0\"),\n      ].join(\"-\"),\n      [\n        hours.toString().padStart(2, \"0\"),\n        minutes.toString().padStart(2, \"0\"),\n        seconds.toString().padStart(2, \"0\"),\n      ].join(\":\"),\n    ].join(\"T\");\n  } else {\n    return null;\n  }\n});\n\nconst _convertToUnit = (seconds, unit: Intl.RelativeTimeFormatUnit) => {\n  switch (unit) {\n    case \"year\":\n    case \"years\":\n      return Math.round(seconds / (60 * 60 * 24 * 365));\n    case \"quarter\":\n    case \"quarters\":\n      return Math.round(seconds / (60 * 60 * 24 * 91.25));\n    case \"month\":\n    case \"months\":\n      return Math.round(seconds / (60 * 60 * 24 * 30.4375));\n    case \"week\":\n    case \"weeks\":\n      return Math.round(seconds / (60 * 60 * 24 * 7));\n    case \"day\":\n    case \"days\":\n      return Math.round(seconds / (60 * 60 * 24));\n    case \"hour\":\n    case \"hours\":\n      return Math.round(seconds / (60 * 60));\n    case \"minute\":\n    case \"minutes\":\n      return Math.round(seconds / 60);\n    case \"second\":\n    case \"seconds\":\n      return seconds;\n  }\n};\n\n/**\n * We cannot Memoize this function since \"now\" is always changing.\n */\nconst formatDateRelative = (\n  value: DateRepresentationNull,\n  options: FormatDateRelativeOptions = {},\n) => {\n  if (value === undefined || value === null) {\n    return null;\n  } else {\n    const locale: Intl.LocalesArgument = _browserLocale(options);\n    const epochUnit = options.epochUnit ?? EpochUnit.BESTGUESS;\n    const formatOptions = options.formatOptions ?? {};\n\n    const now = new Date();\n    const date = toDate(value, epochUnit);\n\n    const diffInSeconds = Math.round((date.getTime() - now.getTime()) / 1000);\n    const absDiff = Math.abs(diffInSeconds);\n\n    let unit!: Intl.RelativeTimeFormatUnit;\n\n    if (options.unit) {\n      unit = options.unit;\n    } else if (absDiff < 60) {\n      unit = \"second\";\n    } else if (absDiff < 3600) {\n      unit = \"minute\";\n    } else if (absDiff < 86400) {\n      unit = \"hour\";\n    } else if (absDiff < 2592000) {\n      unit = \"day\";\n    } else if (absDiff < 31536000) {\n      unit = \"month\";\n    } else {\n      unit = \"year\";\n    }\n\n    const resolvedValue = _convertToUnit(diffInSeconds, unit);\n\n    return _formatRelativeDate(resolvedValue, unit, locale, formatOptions);\n  }\n};\n\nexport {\n  formatDate,\n  formatDateYYYYMMDD,\n  formatDateYYYYMMDDTHHMMSS,\n  formatDateRelative,\n};\n"],"names":["FormatDatePreset","_fetchFormatter","Memoize","locale","formatOptions","Intl","DateTimeFormat","maxSize","_fetchRelativeFormatter","RelativeTimeFormat","_formatDate","value","epochUnit","date","toDate","dateFormatter","isDate","format","undefined","_formatRelativeDate","unit","_browserLocale","options","_options$locale","getUserLocale","fallbackLocale","replace","formatDate","_options$preset","_options$epochUnit","_options$formatOption","preset","DateTime","EpochUnit","BESTGUESS","intlFormatterOptions","None","year","month","day","hour","minute","DateTimeShort","dateStyle","timeStyle","Date","DateMedium","DateShort","fetchPreset","dateTimeFormatOptions","_extends","formatDateYYYYMMDD","d","getFullYear","getMonth","getDate","toString","padStart","join","formatDateYYYYMMDDTHHMMSS","hours","getHours","minutes","getMinutes","seconds","getSeconds","formatDateRelative","_options$epochUnit2","_options$formatOption2","now","diffInSeconds","Math","round","getTime","absDiff","abs","resolvedValue","_convertToUnit"],"mappings":"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"}
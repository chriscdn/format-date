{"version":3,"file":"format-date.module.js","sources":["../src/presets.ts","../src/utils.ts","../src/index.ts"],"sourcesContent":["export enum FormatDatePreset {\n  None,\n  DateTime,\n  DateTimeShort,\n  Date,\n  DateMedium,\n  DateShort,\n}\n\nexport const fetchPreset = (\n  preset: FormatDatePreset,\n): Intl.DateTimeFormatOptions => {\n  switch (preset) {\n    case FormatDatePreset.None:\n      return {};\n    case FormatDatePreset.DateTime:\n      // \"November 25, 2024 at 15:00\"\n      // \"November 25, 2024 at 3:00 PM\"\n      return {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\",\n        hour: \"numeric\",\n        minute: \"numeric\",\n      };\n    case FormatDatePreset.DateTimeShort:\n      // \"11/25/24, 15:00\"\n      // \"11/25/24, 3:00 PM\"\n      return {\n        dateStyle: \"short\",\n        timeStyle: \"short\",\n      };\n\n    case FormatDatePreset.Date:\n      // \"November 25, 2024\"\n      return {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"2-digit\",\n      };\n    case FormatDatePreset.DateMedium:\n      // \"Nov 25, 2024\"\n      return {\n        year: \"numeric\",\n        month: \"short\",\n        day: \"2-digit\",\n      };\n    case FormatDatePreset.DateShort:\n      // \"11/25/24\"\n      return {\n        year: \"numeric\",\n        month: \"2-digit\",\n        day: \"2-digit\",\n      };\n    default:\n      return {\n        dateStyle: \"full\",\n      };\n  }\n};\n","import { Memoize } from \"@chriscdn/memoize\";\n\nconst SECOND = 1;\nconst MINUTE = 60 * SECOND;\nconst HOUR = 60 * MINUTE;\nconst DAY = 24 * HOUR;\nconst WEEK = 7 * DAY;\nconst YEAR = 365 * DAY; // Approximate\n\n// this happens to have no remainder.\nconst MONTH = YEAR / 12;\nconst QUARTER = YEAR / 4;\n\nconst _round = (num: number, significantDigits: number) => {\n  const factor = 10 ** significantDigits;\n  return Math.round(num * factor) / factor;\n};\n\nconst startOfDay = (d: Date) => {\n  const newDate = new Date(d.getTime());\n  newDate.setUTCHours(0, 0, 0, 0);\n  return newDate;\n};\n\nconst convertToUnit = (seconds: number, unit: Intl.RelativeTimeFormatUnit) => {\n  switch (unit) {\n    case \"year\":\n    case \"years\":\n      return _round(seconds / YEAR, 1);\n    case \"quarter\":\n    case \"quarters\":\n      return Math.round(seconds / QUARTER);\n    case \"month\":\n    case \"months\":\n      return Math.round(seconds / MONTH);\n    case \"week\":\n    case \"weeks\":\n      return Math.round(seconds / WEEK);\n    case \"day\":\n    case \"days\":\n      return Math.round(seconds / DAY);\n    case \"hour\":\n    case \"hours\":\n      return Math.round(seconds / HOUR);\n    case \"minute\":\n    case \"minutes\":\n      return Math.round(seconds / MINUTE);\n    case \"second\":\n    case \"seconds\":\n      return seconds;\n  }\n};\n\nconst fetchFormatter = Memoize(\n  (locale: string | undefined, formatOptions: Intl.DateTimeFormatOptions) =>\n    new Intl.DateTimeFormat(locale, formatOptions),\n  { maxSize: 20 },\n);\n\nconst fetchRelativeFormatter = Memoize(\n  (locale: string | undefined, formatOptions: Intl.RelativeTimeFormatOptions) =>\n    new Intl.RelativeTimeFormat(locale, formatOptions),\n  { maxSize: 20 },\n);\n\nconst resolveLocale = (locale: string | undefined) => locale?.replace(\"_\", \"-\");\n\nexport {\n  startOfDay,\n  convertToUnit,\n  fetchFormatter,\n  fetchRelativeFormatter,\n  resolveLocale,\n  SECOND,\n  MINUTE,\n  HOUR,\n  DAY,\n  WEEK,\n  MONTH,\n  YEAR,\n};\n","import { EpochUnit, isDate, toDate } from \"@chriscdn/to-date\";\nimport { Memoize } from \"@chriscdn/memoize\";\nimport { fetchPreset, FormatDatePreset } from \"./presets\";\nimport {\n  convertToUnit,\n  DAY,\n  fetchFormatter,\n  fetchRelativeFormatter,\n  HOUR,\n  MINUTE,\n  MONTH,\n  resolveLocale,\n  startOfDay,\n  WEEK,\n  YEAR,\n} from \"./utils\";\n\nexport type DateRepresentation = Parameters<typeof toDate>[0];\nexport type DateRepresentationNull = DateRepresentation | undefined | null;\nexport { FormatDatePreset } from \"./presets\";\n\nexport type FormatDateOptions = {\n  locale?: string;\n  preset?: FormatDatePreset;\n  formatOptions?: Intl.DateTimeFormatOptions;\n  epochUnit?: EpochUnit;\n};\n\nexport type FormatDateRangeOptions = {\n  locale?: string;\n  formatOptions?: Intl.DateTimeFormatOptions;\n  epochUnit?: EpochUnit;\n};\n\nexport type FormatDateRelativeOptions = {\n  locale?: string;\n  formatOptions?: Intl.RelativeTimeFormatOptions;\n  unit?: Intl.RelativeTimeFormatUnit;\n  epochUnit?: EpochUnit;\n};\n\nconst formatDate = Memoize(\n  (value: DateRepresentationNull, options: FormatDateOptions = {}) => {\n    const epochUnit = options.epochUnit ?? EpochUnit.BESTGUESS;\n    const date = toDate(value, epochUnit);\n\n    if (isDate(date)) {\n      const locale = resolveLocale(options.locale);\n      const preset = options.preset ?? FormatDatePreset.DateTime;\n\n      const formatOptions = options.formatOptions ?? {};\n\n      const intlFormatterOptions = fetchPreset(preset);\n\n      const dateTimeFormatOptions: Intl.DateTimeFormatOptions = {\n        ...intlFormatterOptions,\n        ...formatOptions,\n      };\n\n      const dateFormatter = fetchFormatter(locale, dateTimeFormatOptions);\n\n      return dateFormatter.format(date);\n    } else {\n      return null;\n    }\n  },\n);\n\nconst formatDateYYYYMMDD = Memoize(\n  (\n    value: DateRepresentationNull,\n    timeZone?: Intl.DateTimeFormatOptions[\"timeZone\"],\n  ) => {\n    const date = toDate(value);\n\n    if (isDate(date)) {\n      const options: Intl.DateTimeFormatOptions = {\n        timeZone,\n        hourCycle: \"h23\",\n        year: \"numeric\",\n        month: \"2-digit\",\n        day: \"2-digit\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        second: \"2-digit\",\n      };\n\n      const formatter = fetchFormatter(\"en-US\", options);\n      const parts = formatter.formatToParts(date);\n\n      const year = parts.find((part) => part.type === \"year\")!.value;\n      const month = parts.find((part) => part.type === \"month\")!.value;\n      const day = parts.find((part) => part.type === \"day\")!.value;\n\n      // Return the formatted date in the form \"YYYY-MM-DD\"\n      return `${year}-${month}-${day}`;\n    } else {\n      return null;\n    }\n  },\n);\n\nconst formatDateYYYYMMDDTHHMMSS = Memoize(\n  (\n    value: DateRepresentationNull,\n    timeZone?: Intl.DateTimeFormatOptions[\"timeZone\"],\n  ) => {\n    const date = toDate(value);\n\n    if (isDate(date)) {\n      const options: Intl.DateTimeFormatOptions = {\n        timeZone,\n        hourCycle: \"h23\",\n        year: \"numeric\",\n        month: \"2-digit\",\n        day: \"2-digit\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        second: \"2-digit\",\n      };\n\n      const formatter = fetchFormatter(\"en-US\", options);\n      const parts = formatter.formatToParts(date);\n\n      // Extract the formatted components from the parts\n      const year = parts.find((part) => part.type === \"year\")!.value;\n      const month = parts.find((part) => part.type === \"month\")!.value;\n      const day = parts.find((part) => part.type === \"day\")!.value;\n      const hours = parts.find((part) => part.type === \"hour\")!.value;\n      const minutes = parts.find((part) => part.type === \"minute\")!.value;\n      const seconds = parts.find((part) => part.type === \"second\")!.value;\n\n      // Return the formatted date in the form \"YYYY-MM-DDTHH:MM:SS\"\n      return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;\n    } else {\n      return null;\n    }\n  },\n);\n\nconst formatDateRange = Memoize(\n  (\n    start: DateRepresentationNull,\n    end: DateRepresentationNull,\n    options: FormatDateRangeOptions = {},\n  ) => {\n    const epochUnit = options.epochUnit ?? EpochUnit.BESTGUESS;\n\n    const startDate = toDate(start, epochUnit);\n    const endDate = toDate(end, epochUnit);\n\n    if (isDate(startDate) && isDate(endDate)) {\n      const locale = resolveLocale(options.locale);\n      const formatOptions = options.formatOptions ?? {};\n\n      // Opinionated default to {dateStyle: \"long\"}\n      const formatter = fetchFormatter(locale, {\n        dateStyle: \"long\",\n        ...formatOptions,\n      });\n\n      // @ts-ignore Seems to be a TS error here for whatever reason.\n      return formatter.formatRange(startDate, endDate);\n    } else {\n      return null;\n    }\n  },\n);\n\nconst formatDateRelative = (\n  value: DateRepresentationNull,\n  options: FormatDateRelativeOptions = {},\n  _now: DateRepresentationNull = undefined,\n) => {\n  // We cannot Memoize this function since \"now\" isn't fixed.\n\n  const epochUnit = options.epochUnit ?? EpochUnit.BESTGUESS;\n\n  const date = toDate(value, epochUnit);\n  const now = toDate(_now, epochUnit) ?? new Date();\n\n  if (isDate(date) && isDate(now)) {\n    const locale = options.locale;\n\n    const formatOptions = options.formatOptions ?? {};\n\n    const diffInSeconds = Math.round((date.getTime() - now.getTime()) / 1000);\n    const absDiff = Math.abs(diffInSeconds);\n\n    let unit!: Intl.RelativeTimeFormatUnit;\n\n    if (options.unit) {\n      unit = options.unit;\n    } else if (absDiff < MINUTE) {\n      unit = \"second\";\n    } else if (absDiff < HOUR) {\n      unit = \"minute\";\n    } else if (absDiff < DAY) {\n      unit = \"hour\";\n    } else if (absDiff < 2 * WEEK) {\n      unit = \"day\";\n    } else if (absDiff < 2 * MONTH) {\n      unit = \"week\";\n    } else if (absDiff < YEAR) {\n      unit = \"month\";\n    } else {\n      unit = \"year\";\n    }\n\n    // If the difference is greater than 24hrs, then switch our diff in seconds\n    // to be in units of whole days. This will ensure our relative date is\n    // respective of calendar days and not units of 24hrs.\n\n    const resolvedDiffInSeconds =\n      absDiff > DAY\n        ? Math.round(\n            (startOfDay(date).getTime() - startOfDay(now).getTime()) / 1000,\n          )\n        : diffInSeconds;\n\n    const diffInUnits = convertToUnit(resolvedDiffInSeconds, unit);\n\n    const dateRelativeFormatter = fetchRelativeFormatter(locale, formatOptions);\n\n    return dateRelativeFormatter.format(diffInUnits, unit);\n  } else {\n    return null;\n  }\n};\n\nexport {\n  formatDate,\n  formatDateRange,\n  formatDateRelative,\n  formatDateYYYYMMDD,\n  formatDateYYYYMMDDTHHMMSS,\n};\n"],"names":["FormatDatePreset","DAY","WEEK","YEAR","startOfDay","d","newDate","Date","getTime","setUTCHours","fetchFormatter","Memoize","locale","formatOptions","Intl","DateTimeFormat","maxSize","fetchRelativeFormatter","RelativeTimeFormat","resolveLocale","replace","formatDate","value","options","_options$epochUnit","epochUnit","EpochUnit","BESTGUESS","date","toDate","isDate","_options$preset","_options$formatOption","preset","DateTime","intlFormatterOptions","None","year","month","day","hour","minute","DateTimeShort","dateStyle","timeStyle","DateMedium","DateShort","fetchPreset","dateTimeFormatOptions","_extends","format","formatDateYYYYMMDD","timeZone","parts","hourCycle","second","formatToParts","find","part","type","formatDateYYYYMMDDTHHMMSS","hours","minutes","seconds","formatDateRange","start","end","_options$epochUnit2","startDate","endDate","_options$formatOption2","formatRange","formatDateRelative","_now","_options$epochUnit3","_toDate","undefined","now","_options$formatOption3","unit","diffInSeconds","Math","round","absDiff","abs","diffInUnits","num","factor","pow","convertToUnit"],"mappings":"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"}
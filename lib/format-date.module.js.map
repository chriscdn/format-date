{"version":3,"file":"format-date.module.js","sources":["../src/presets.ts","../src/index.ts"],"sourcesContent":["export enum FormatDatePreset {\n    None,\n    DateTime,\n    DateTimeShort,\n    Date,\n    DateMedium,\n    DateShort,\n}\n\nexport const fetchPreset = (\n    preset: FormatDatePreset,\n    locale: string,\n): Intl.DateTimeFormatOptions => {\n    switch (preset) {\n        case FormatDatePreset.None:\n            return {};\n        case FormatDatePreset.DateTime:\n            // \"November 25, 2024 at 15:00\"\n            // \"November 25, 2024 at 3:00 PM\"\n            return {\n                // weekday: \"short\",\n                year: \"numeric\",\n                month: \"long\",\n                day: \"numeric\",\n                hour: \"numeric\",\n                minute: \"numeric\",\n            };\n        case FormatDatePreset.DateTimeShort:\n            // \"11/25/24, 15:00\"\n            // \"11/25/24, 3:00 PM\"\n            return {\n                dateStyle: \"short\",\n                timeStyle: \"short\",\n            };\n\n        case FormatDatePreset.Date:\n            // \"November 25, 2024\"\n            return {\n                // dateStyle: \"long\",\n                year: \"numeric\",\n                month: \"long\",\n                day: \"2-digit\",\n            };\n        case FormatDatePreset.DateMedium:\n            // \"Nov 25, 2024\"\n            return {\n                // dateStyle: \"medium\",\n                year: \"numeric\",\n                month: \"short\",\n                day: \"2-digit\",\n            };\n        case FormatDatePreset.DateShort:\n            // \"11/25/24\"\n            return {\n                // dateStyle: \"short\",\n                year: \"numeric\",\n                month: \"2-digit\",\n                day: \"2-digit\",\n            };\n        default:\n            return {\n                dateStyle: \"full\",\n            };\n    }\n};\n","import { EpochUnit, isDate, toDate } from \"@chriscdn/to-date\";\nimport { Memoize } from \"@chriscdn/memoize\";\nimport { fetchPreset, FormatDatePreset } from \"./presets\";\nimport { getUserLocale } from \"get-user-locale\";\n\ntype DateRepresentation = Parameters<typeof toDate>[0];\ntype DateRepresentationNull = DateRepresentation | undefined | null;\nexport { FormatDatePreset } from \"./presets\";\n\nexport type FormatDateOptions = {\n    locale?: string;\n    preset?: FormatDatePreset;\n    formatOptions?: Intl.DateTimeFormatOptions;\n    epochUnit?: EpochUnit;\n};\n\nconst _fetchFormatter = Memoize((\n    locale: string,\n    formatOptions: Intl.DateTimeFormatOptions,\n) => Intl.DateTimeFormat(locale, formatOptions), { maxSize: 20 });\n\nconst _formatDate = Memoize((\n    value: DateRepresentation,\n    locale: string,\n    epochUnit: EpochUnit,\n    formatOptions: Intl.DateTimeFormatOptions,\n) => {\n    const date = toDate(value, epochUnit);\n    const dateFormatter = _fetchFormatter(locale, formatOptions);\n    return isDate(date) ? dateFormatter.format(date) : undefined;\n});\n\n/**\n * Get the browser locale, if possible. This will likely fail in SSR (i.e.,\n * Nuxt). Converts underscores to dashes.\n *\n * @param options {Options}\n * @returns\n */\nconst _browserLocale = Memoize((options: FormatDateOptions) =>\n    (options.locale ??\n        getUserLocale(\n            { fallbackLocale: \"en-GB\" },\n        )).replace(\n            \"_\",\n            \"-\",\n        )\n);\n\nconst formatDate = Memoize(\n    (value: DateRepresentationNull, options: FormatDateOptions = {}) => {\n        if (value === undefined || value === null) {\n            return null;\n        } else {\n            const locale: Intl.LocalesArgument = _browserLocale(options);\n            const preset = options.preset ?? FormatDatePreset.DateTime;\n            const epochUnit = options.epochUnit ?? EpochUnit.BESTGUESS;\n            const formatOptions = options.formatOptions ?? {};\n\n            const intlFormatterOptions = fetchPreset(preset, locale);\n\n            const dateTimeFormatOptions: Intl.DateTimeFormatOptions = {\n                ...intlFormatterOptions,\n                ...formatOptions,\n            };\n\n            return _formatDate(value, locale, epochUnit, dateTimeFormatOptions);\n        }\n    },\n);\n\nexport { formatDate };\n"],"names":["FormatDatePreset","_fetchFormatter","Memoize","locale","formatOptions","Intl","DateTimeFormat","maxSize","_formatDate","value","epochUnit","date","toDate","dateFormatter","isDate","format","undefined","_browserLocale","options","_options$locale","getUserLocale","fallbackLocale","replace","formatDate","_options$preset","_options$epochUnit","_options$formatOption","preset","DateTime","EpochUnit","BESTGUESS","intlFormatterOptions","None","year","month","day","hour","minute","DateTimeShort","dateStyle","timeStyle","Date","DateMedium","DateShort","fetchPreset","dateTimeFormatOptions","_extends"],"mappings":"0XAAY,IAAAA,GAAZ,SAAYA,GACRA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,SAAA,GAAA,WACAA,EAAAA,EAAA,cAAA,GAAA,gBACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,WAAA,GAAA,aACAA,EAAAA,EAAA,UAAA,GAAA,WACH,CAPD,CAAYA,IAAAA,EAOX,CAAA,IAEY,ICOPC,EAAkBC,EAAQ,SAC5BC,EACAC,UACCC,KAAKC,eAAeH,EAAQC,EAAc,EAAE,CAAEG,QAAS,KAEtDC,EAAcN,EAAQ,SACxBO,EACAN,EACAO,EACAN,GAEA,IAAMO,EAAOC,EAAOH,EAAOC,GACrBG,EAAgBZ,EAAgBE,EAAQC,GAC9C,OAAOU,EAAOH,GAAQE,EAAcE,OAAOJ,QAAQK,CACvD,GASMC,EAAiBf,EAAQ,SAACgB,GAA0BC,IAAAA,EACtD,OAAeA,OAAfA,EAACD,EAAQf,QAAMgB,EACXC,EACI,CAAEC,eAAgB,WACnBC,QACC,IACA,IACH,GAGHC,EAAarB,EACf,SAACO,EAA+BS,GAC5B,QAD4B,IAAAA,IAAAA,EAA6B,CAAE,GACvDT,QACA,OACH,KAAM,IAAAe,EAAAC,EAAAC,EACGvB,EAA+Bc,EAAeC,GAC9CS,EAAuB,OAAjBH,EAAGN,EAAQS,QAAMH,EAAIxB,EAAiB4B,SAC5ClB,EAA6B,OAApBe,EAAGP,EAAQR,WAASe,EAAII,EAAUC,UAC3C1B,EAAqC,OAAxBsB,EAAGR,EAAQd,eAAasB,EAAI,GAEzCK,EDlDS,SACvBJ,GAGA,OAAQA,GACJ,KAAK3B,EAAiBgC,KAClB,MAAO,CAAA,EACX,KAAKhC,EAAiB4B,SAGlB,MAAO,CAEHK,KAAM,UACNC,MAAO,OACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,WAEhB,KAAKrC,EAAiBsC,cAGlB,MAAO,CACHC,UAAW,QACXC,UAAW,SAGnB,KAAKxC,EAAiByC,KAElB,MAAO,CAEHR,KAAM,UACNC,MAAO,OACPC,IAAK,WAEb,KAAKnC,EAAiB0C,WAElB,MAAO,CAEHT,KAAM,UACNC,MAAO,QACPC,IAAK,WAEb,KAAKnC,EAAiB2C,UAElB,MAAO,CAEHV,KAAM,UACNC,MAAO,UACPC,IAAK,WAEb,QACI,MAAO,CACHI,UAAW,QAG3B,CCLyCK,CAAYjB,GAEnCkB,EAAqBC,EAAA,CAAA,EACpBf,EACA3B,GAGP,OAAOI,EAAYC,EAAON,EAAQO,EAAWmC,EAErD"}
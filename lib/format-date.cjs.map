{"version":3,"file":"format-date.cjs","sources":["../src/presets.ts","../src/index.ts"],"sourcesContent":["export enum FormatDatePreset {\n    None,\n    DateTime,\n    DateTimeShort,\n    Date,\n    DateMedium,\n    DateShort,\n}\n\nexport const fetchPreset = (\n    preset: FormatDatePreset,\n    // locale: string,\n): Intl.DateTimeFormatOptions => {\n    switch (preset) {\n        case FormatDatePreset.None:\n            return {};\n        case FormatDatePreset.DateTime:\n            // \"November 25, 2024 at 15:00\"\n            // \"November 25, 2024 at 3:00 PM\"\n            return {\n                // weekday: \"short\",\n                year: \"numeric\",\n                month: \"long\",\n                day: \"numeric\",\n                hour: \"numeric\",\n                minute: \"numeric\",\n            };\n        case FormatDatePreset.DateTimeShort:\n            // \"11/25/24, 15:00\"\n            // \"11/25/24, 3:00 PM\"\n            return {\n                dateStyle: \"short\",\n                timeStyle: \"short\",\n            };\n\n        case FormatDatePreset.Date:\n            // \"November 25, 2024\"\n            return {\n                // dateStyle: \"long\",\n                year: \"numeric\",\n                month: \"long\",\n                day: \"2-digit\",\n            };\n        case FormatDatePreset.DateMedium:\n            // \"Nov 25, 2024\"\n            return {\n                // dateStyle: \"medium\",\n                year: \"numeric\",\n                month: \"short\",\n                day: \"2-digit\",\n            };\n        case FormatDatePreset.DateShort:\n            // \"11/25/24\"\n            return {\n                // dateStyle: \"short\",\n                year: \"numeric\",\n                month: \"2-digit\",\n                day: \"2-digit\",\n            };\n        default:\n            return {\n                dateStyle: \"full\",\n            };\n    }\n};\n","import { EpochUnit, isDate, toDate } from \"@chriscdn/to-date\";\nimport { Memoize } from \"@chriscdn/memoize\";\nimport { fetchPreset, FormatDatePreset } from \"./presets\";\nimport { getUserLocale } from \"get-user-locale\";\n\nexport type DateRepresentation = Parameters<typeof toDate>[0];\nexport type DateRepresentationNull = DateRepresentation | undefined | null;\nexport { FormatDatePreset } from \"./presets\";\n\nexport type FormatDateOptions = {\n  locale?: string;\n  preset?: FormatDatePreset;\n  formatOptions?: Intl.DateTimeFormatOptions;\n  epochUnit?: EpochUnit;\n};\n\nexport type FormatDateRelativeOptions = {\n  locale?: string;\n  formatOptions?: Intl.RelativeTimeFormatOptions;\n  unit?: Intl.RelativeTimeFormatUnit;\n  epochUnit?: EpochUnit;\n};\n\nconst _fetchFormatter = Memoize(\n  (locale: string, formatOptions: Intl.DateTimeFormatOptions) =>\n    new Intl.DateTimeFormat(locale, formatOptions),\n  { maxSize: 20 },\n);\n\nconst _fetchRelativeFormatter = Memoize(\n  (locale: string, formatOptions: Intl.RelativeTimeFormatOptions) =>\n    new Intl.RelativeTimeFormat(locale, formatOptions),\n  { maxSize: 20 },\n);\n\n/**\n * Get the browser locale, if possible. This will likely fail in SSR (i.e.,\n * Nuxt). Converts underscores to dashes.\n *\n * @param options {Options}\n * @returns\n */\nconst _browserLocale = Memoize(\n  (options: FormatDateOptions | FormatDateRelativeOptions) =>\n    (options.locale ?? getUserLocale({ fallbackLocale: \"en-GB\" })).replace(\n      \"_\",\n      \"-\",\n    ),\n);\n\nconst formatDate = Memoize(\n  (value: DateRepresentationNull, options: FormatDateOptions = {}) => {\n    const epochUnit = options.epochUnit ?? EpochUnit.BESTGUESS;\n    const date = toDate(value, epochUnit);\n\n    if (isDate(date)) {\n      const locale: Intl.LocalesArgument = _browserLocale(options);\n      const preset = options.preset ?? FormatDatePreset.DateTime;\n\n      const formatOptions = options.formatOptions ?? {};\n\n      const intlFormatterOptions = fetchPreset(preset);\n\n      const dateTimeFormatOptions: Intl.DateTimeFormatOptions = {\n        ...intlFormatterOptions,\n        ...formatOptions,\n      };\n\n      const dateFormatter = _fetchFormatter(locale, dateTimeFormatOptions);\n\n      return dateFormatter.format(date);\n    } else {\n      return null;\n    }\n  },\n);\n\nconst formatDateYYYYMMDD = Memoize((value: DateRepresentationNull) => {\n  const d = toDate(value);\n\n  if (isDate(d)) {\n    const year = d.getFullYear();\n    const month = d.getMonth() + 1;\n    const day = d.getDate();\n\n    return [\n      year,\n      month.toString().padStart(2, \"0\"),\n      day.toString().padStart(2, \"0\"),\n    ].join(\"-\");\n  } else {\n    return null;\n  }\n});\n\nconst formatDateYYYYMMDDTHHMMSS = Memoize((value: DateRepresentationNull) => {\n  const d = toDate(value);\n\n  if (d) {\n    const year = d.getFullYear();\n    const month = d.getMonth() + 1;\n    const day = d.getDate();\n\n    const hours = d.getHours();\n    const minutes = d.getMinutes();\n    const seconds = d.getSeconds();\n\n    return [\n      [\n        year,\n        month.toString().padStart(2, \"0\"),\n        day.toString().padStart(2, \"0\"),\n      ].join(\"-\"),\n      [\n        hours.toString().padStart(2, \"0\"),\n        minutes.toString().padStart(2, \"0\"),\n        seconds.toString().padStart(2, \"0\"),\n      ].join(\":\"),\n    ].join(\"T\");\n  } else {\n    return null;\n  }\n});\n\nconst _convertToUnit = (seconds: number, unit: Intl.RelativeTimeFormatUnit) => {\n  switch (unit) {\n    case \"year\":\n    case \"years\":\n      return Math.round(seconds / (60 * 60 * 24 * 365));\n    case \"quarter\":\n    case \"quarters\":\n      return Math.round(seconds / (60 * 60 * 24 * 91.25));\n    case \"month\":\n    case \"months\":\n      return Math.round(seconds / (60 * 60 * 24 * 30.4375));\n    case \"week\":\n    case \"weeks\":\n      return Math.round(seconds / (60 * 60 * 24 * 7));\n    case \"day\":\n    case \"days\":\n      return Math.round(seconds / (60 * 60 * 24));\n    case \"hour\":\n    case \"hours\":\n      return Math.round(seconds / (60 * 60));\n    case \"minute\":\n    case \"minutes\":\n      return Math.round(seconds / 60);\n    case \"second\":\n    case \"seconds\":\n      return seconds;\n  }\n};\n\nconst formatDateRange = Memoize(\n  (\n    start: DateRepresentationNull,\n    end: DateRepresentationNull,\n    options: FormatDateOptions = {},\n  ) => {\n    const epochUnit = options.epochUnit ?? EpochUnit.BESTGUESS;\n\n    const startDate = toDate(start, epochUnit);\n    const endDate = toDate(end, epochUnit);\n\n    if (isDate(startDate) && isDate(endDate)) {\n      const locale: Intl.LocalesArgument = _browserLocale(options);\n      const formatOptions = options.formatOptions ?? {};\n\n      // Opinionated default to {dateStyle: \"long\"}\n      const formatter = _fetchFormatter(locale, {\n        dateStyle: \"long\",\n        ...formatOptions,\n      });\n\n      // @ts-ignore Seems to be a TS error here for whatever reason.\n      return formatter.formatRange(startDate, endDate);\n    } else {\n      return null;\n    }\n  },\n);\n\n/**\n * We cannot Memoize this function since \"now\" isn't fixed.\n */\nconst formatDateRelative = (\n  value: DateRepresentationNull,\n  options: FormatDateRelativeOptions = {},\n  _now: DateRepresentationNull = undefined,\n) => {\n  const epochUnit = options.epochUnit ?? EpochUnit.BESTGUESS;\n\n  const date = toDate(value, epochUnit);\n  const now = toDate(_now) ?? new Date();\n\n  if (isDate(date) && isDate(now)) {\n    const locale: Intl.LocalesArgument = _browserLocale(options);\n\n    const formatOptions = options.formatOptions ?? {};\n\n    const now = toDate(_now) ?? new Date();\n    const date = toDate(value, epochUnit);\n\n    const diffInSeconds = Math.round((date.getTime() - now.getTime()) / 1000);\n    const absDiff = Math.abs(diffInSeconds);\n\n    let unit!: Intl.RelativeTimeFormatUnit;\n\n    if (options.unit) {\n      unit = options.unit;\n    } else if (absDiff < 60) {\n      unit = \"second\";\n    } else if (absDiff < 3600) {\n      unit = \"minute\";\n    } else if (absDiff < 86400) {\n      unit = \"hour\";\n    } else if (absDiff < 2592000) {\n      unit = \"day\";\n    } else if (absDiff < 31536000) {\n      unit = \"month\";\n    } else {\n      unit = \"year\";\n    }\n\n    const diffInUnits = _convertToUnit(diffInSeconds, unit);\n\n    const dateRelativeFormatter = _fetchRelativeFormatter(\n      locale,\n      formatOptions,\n    );\n\n    return dateRelativeFormatter.format(diffInUnits, unit);\n  } else {\n    return null;\n  }\n};\n\nexport {\n  formatDate,\n  formatDateRange,\n  formatDateYYYYMMDD,\n  formatDateYYYYMMDDTHHMMSS,\n  formatDateRelative,\n};\n"],"names":["FormatDatePreset","_fetchFormatter","Memoize","locale","formatOptions","Intl","DateTimeFormat","maxSize","_fetchRelativeFormatter","RelativeTimeFormat","_browserLocale","options","_options$locale","getUserLocale","fallbackLocale","replace","formatDate","value","_options$epochUnit","epochUnit","EpochUnit","BESTGUESS","date","toDate","isDate","_options$preset","_options$formatOption","preset","DateTime","intlFormatterOptions","None","year","month","day","hour","minute","DateTimeShort","dateStyle","timeStyle","Date","DateMedium","DateShort","fetchPreset","dateTimeFormatOptions","_extends","format","formatDateYYYYMMDD","d","getFullYear","getMonth","getDate","toString","padStart","join","formatDateYYYYMMDDTHHMMSS","hours","getHours","minutes","getMinutes","seconds","getSeconds","formatDateRange","start","end","_options$epochUnit2","startDate","endDate","_options$formatOption2","formatRange","_now","_options$epochUnit3","_toDate","undefined","now","_options$formatOption3","_toDate2","unit","diffInSeconds","Math","round","getTime","absDiff","abs","diffInUnits","_convertToUnit"],"mappings":"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"}
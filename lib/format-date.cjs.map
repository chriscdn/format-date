{"version":3,"file":"format-date.cjs","sources":["../src/presets.ts","../src/index.ts"],"sourcesContent":["export enum FormatDatePreset {\n    None,\n    DateTime,\n    DateTimeShort,\n    Date,\n    DateMedium,\n    DateShort,\n}\n\nexport const fetchPreset = (\n    preset: FormatDatePreset,\n    // locale: string,\n): Intl.DateTimeFormatOptions => {\n    switch (preset) {\n        case FormatDatePreset.None:\n            return {};\n        case FormatDatePreset.DateTime:\n            // \"November 25, 2024 at 15:00\"\n            // \"November 25, 2024 at 3:00 PM\"\n            return {\n                // weekday: \"short\",\n                year: \"numeric\",\n                month: \"long\",\n                day: \"numeric\",\n                hour: \"numeric\",\n                minute: \"numeric\",\n            };\n        case FormatDatePreset.DateTimeShort:\n            // \"11/25/24, 15:00\"\n            // \"11/25/24, 3:00 PM\"\n            return {\n                dateStyle: \"short\",\n                timeStyle: \"short\",\n            };\n\n        case FormatDatePreset.Date:\n            // \"November 25, 2024\"\n            return {\n                // dateStyle: \"long\",\n                year: \"numeric\",\n                month: \"long\",\n                day: \"2-digit\",\n            };\n        case FormatDatePreset.DateMedium:\n            // \"Nov 25, 2024\"\n            return {\n                // dateStyle: \"medium\",\n                year: \"numeric\",\n                month: \"short\",\n                day: \"2-digit\",\n            };\n        case FormatDatePreset.DateShort:\n            // \"11/25/24\"\n            return {\n                // dateStyle: \"short\",\n                year: \"numeric\",\n                month: \"2-digit\",\n                day: \"2-digit\",\n            };\n        default:\n            return {\n                dateStyle: \"full\",\n            };\n    }\n};\n","import { EpochUnit, isDate, toDate } from \"@chriscdn/to-date\";\nimport { Memoize } from \"@chriscdn/memoize\";\nimport { fetchPreset, FormatDatePreset } from \"./presets\";\nimport { getUserLocale } from \"get-user-locale\";\n\ntype DateRepresentation = Parameters<typeof toDate>[0];\ntype DateRepresentationNull = DateRepresentation | undefined | null;\nexport { FormatDatePreset } from \"./presets\";\n\nexport type FormatDateOptions = {\n    locale?: string;\n    preset?: FormatDatePreset;\n    formatOptions?: Intl.DateTimeFormatOptions;\n    epochUnit?: EpochUnit;\n};\n\nconst _fetchFormatter = Memoize((\n    locale: string,\n    formatOptions: Intl.DateTimeFormatOptions,\n) => Intl.DateTimeFormat(locale, formatOptions), { maxSize: 20 });\n\nconst _formatDate = Memoize((\n    value: DateRepresentation,\n    locale: string,\n    epochUnit: EpochUnit,\n    formatOptions: Intl.DateTimeFormatOptions,\n) => {\n    const date = toDate(value, epochUnit);\n    const dateFormatter = _fetchFormatter(locale, formatOptions);\n    return isDate(date) ? dateFormatter.format(date) : undefined;\n});\n\n/**\n * Get the browser locale, if possible. This will likely fail in SSR (i.e.,\n * Nuxt). Converts underscores to dashes.\n *\n * @param options {Options}\n * @returns\n */\nconst _browserLocale = Memoize((options: FormatDateOptions) =>\n    (options.locale ??\n        getUserLocale(\n            { fallbackLocale: \"en-GB\" },\n        )).replace(\n            \"_\",\n            \"-\",\n        )\n);\n\nconst formatDate = Memoize(\n    (value: DateRepresentationNull, options: FormatDateOptions = {}) => {\n        if (value === undefined || value === null) {\n            return null;\n        } else {\n            const locale: Intl.LocalesArgument = _browserLocale(options);\n            const preset = options.preset ?? FormatDatePreset.DateTime;\n            const epochUnit = options.epochUnit ?? EpochUnit.BESTGUESS;\n            const formatOptions = options.formatOptions ?? {};\n\n            const intlFormatterOptions = fetchPreset(preset);\n\n            const dateTimeFormatOptions: Intl.DateTimeFormatOptions = {\n                ...intlFormatterOptions,\n                ...formatOptions,\n            };\n\n            return _formatDate(value, locale, epochUnit, dateTimeFormatOptions);\n        }\n    },\n);\n\nconst formatDateYYYYMMDD = Memoize((value: DateRepresentationNull) => {\n    const d = toDate(value);\n\n    if (d) {\n        const year = d.getFullYear();\n        const month = d.getMonth() + 1;\n        const day = d.getDate();\n\n        return [\n            year,\n            month.toString().padStart(2, \"0\"),\n            day.toString().padStart(2, \"0\"),\n        ].join(\"-\");\n    } else {\n        return null;\n    }\n});\n\nconst formatDateYYYYMMDDTHHMMSS = Memoize((value: DateRepresentationNull) => {\n    const d = toDate(value);\n\n    if (d) {\n        const year = d.getFullYear();\n        const month = d.getMonth() + 1;\n        const day = d.getDate();\n\n        const hours = d.getHours();\n        const minutes = d.getMinutes();\n        const seconds = d.getSeconds();\n\n        return [\n            [\n                year,\n                month.toString().padStart(2, \"0\"),\n                day.toString().padStart(2, \"0\"),\n            ].join(\"-\"),\n            [\n                hours.toString().padStart(2, \"0\"),\n                minutes.toString().padStart(2, \"0\"),\n                seconds.toString().padStart(2, \"0\"),\n            ].join(\":\"),\n        ].join(\"T\");\n    } else {\n        return null;\n    }\n});\n\nexport { formatDate, formatDateYYYYMMDD, formatDateYYYYMMDDTHHMMSS };\n"],"names":["FormatDatePreset","_fetchFormatter","Memoize","locale","formatOptions","Intl","DateTimeFormat","maxSize","_formatDate","value","epochUnit","date","toDate","dateFormatter","isDate","format","undefined","_browserLocale","options","_options$locale","getUserLocale","fallbackLocale","replace","formatDate","_options$preset","_options$epochUnit","_options$formatOption","preset","DateTime","EpochUnit","BESTGUESS","intlFormatterOptions","None","year","month","day","hour","minute","DateTimeShort","dateStyle","timeStyle","Date","DateMedium","DateShort","fetchPreset","dateTimeFormatOptions","_extends","formatDateYYYYMMDD","d","getFullYear","getMonth","getDate","toString","padStart","join","formatDateYYYYMMDDTHHMMSS","hours","getHours","minutes","getMinutes","seconds","getSeconds"],"mappings":"IAAYA,qTAAAA,QAAZA,sBAAA,GAAYA,EAAAA,QAAAA,mBAAAA,QAAAA,iBAOX,CAAA,IANGA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,SAAA,GAAA,WACAA,EAAAA,EAAA,cAAA,GAAA,gBACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,WAAA,GAAA,aACAA,EAAAA,EAAA,UAAA,GAAA,YAGG,ICODC,EAAkBC,EAAOA,QAAC,SAC5BC,EACAC,GACC,OAAAC,KAAKC,eAAeH,EAAQC,EAAc,EAAE,CAAEG,QAAS,KAEtDC,EAAcN,EAAAA,QAAQ,SACxBO,EACAN,EACAO,EACAN,GAEA,IAAMO,EAAOC,EAAMA,OAACH,EAAOC,GACrBG,EAAgBZ,EAAgBE,EAAQC,GAC9C,OAAOU,EAAMA,OAACH,GAAQE,EAAcE,OAAOJ,QAAQK,CACvD,GASMC,EAAiBf,EAAAA,QAAQ,SAACgB,GAA0B,IAAAC,EAAA,OACvC,OAAfA,EAACD,EAAQf,QAAMgB,EACXC,EAAAA,cACI,CAAEC,eAAgB,WACnBC,QACC,IACA,IACH,GAGHC,EAAarB,EAAOA,QACtB,SAACO,EAA+BS,GAC5B,YAD4BA,IAAAA,EAA6B,CAAA,GACrDT,QACA,OAAO,KACJ,IAAAe,EAAAC,EAAAC,EACGvB,EAA+Bc,EAAeC,GAC9CS,SAAMH,EAAGN,EAAQS,QAAMH,EAAIxB,QAAAA,iBAAiB4B,SAC5ClB,EAA6Be,OAApBA,EAAGP,EAAQR,WAASe,EAAII,EAAAA,UAAUC,UAC3C1B,EAAqCsB,OAAxBA,EAAGR,EAAQd,eAAasB,EAAI,CAAA,EAEzCK,EDlDS,SACvBJ,GAGA,OAAQA,GACJ,KAAK3B,QAAAA,iBAAiBgC,KAClB,MAAO,CAAA,EACX,KAAKhC,QAAgBA,iBAAC4B,SAGlB,MAAO,CAEHK,KAAM,UACNC,MAAO,OACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,WAEhB,KAAKrC,QAAAA,iBAAiBsC,cAGlB,MAAO,CACHC,UAAW,QACXC,UAAW,SAGnB,KAAKxC,QAAgBA,iBAACyC,KAElB,MAAO,CAEHR,KAAM,UACNC,MAAO,OACPC,IAAK,WAEb,KAAKnC,yBAAiB0C,WAElB,MAAO,CAEHT,KAAM,UACNC,MAAO,QACPC,IAAK,WAEb,KAAKnC,QAAAA,iBAAiB2C,UAElB,MAAO,CAEHV,KAAM,UACNC,MAAO,UACPC,IAAK,WAEb,QACI,MAAO,CACHI,UAAW,QAG3B,CCLyCK,CAAYjB,GAEnCkB,EAAqBC,EACpBf,CAAAA,EAAAA,EACA3B,GAGP,OAAOI,EAAYC,EAAON,EAAQO,EAAWmC,EAErD,GAGEE,EAAqB7C,EAAOA,QAAC,SAACO,GAChC,IAAMuC,EAAIpC,EAAAA,OAAOH,GAEjB,GAAIuC,EAAG,CACH,IAAMf,EAAOe,EAAEC,cACTf,EAAQc,EAAEE,WAAa,EACvBf,EAAMa,EAAEG,UAEd,MAAO,CACHlB,EACAC,EAAMkB,WAAWC,SAAS,EAAG,KAC7BlB,EAAIiB,WAAWC,SAAS,EAAG,MAC7BC,KAAK,IACV,CACG,OACH,IACL,GAEMC,EAA4BrD,EAAOA,QAAC,SAACO,GACvC,IAAMuC,EAAIpC,EAAAA,OAAOH,GAEjB,GAAIuC,EAAG,CACH,IAAMf,EAAOe,EAAEC,cACTf,EAAQc,EAAEE,WAAa,EACvBf,EAAMa,EAAEG,UAERK,EAAQR,EAAES,WACVC,EAAUV,EAAEW,aACZC,EAAUZ,EAAEa,aAElB,MAAO,CACH,CACI5B,EACAC,EAAMkB,WAAWC,SAAS,EAAG,KAC7BlB,EAAIiB,WAAWC,SAAS,EAAG,MAC7BC,KAAK,KACP,CACIE,EAAMJ,WAAWC,SAAS,EAAG,KAC7BK,EAAQN,WAAWC,SAAS,EAAG,KAC/BO,EAAQR,WAAWC,SAAS,EAAG,MACjCC,KAAK,MACTA,KAAK,IACV,CACG,WAER"}